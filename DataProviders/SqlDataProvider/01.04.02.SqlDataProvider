
ALTER TABLE {databaseOwner}[{objectQualifier}avtRedirect] ADD LogoutUser int Default 0 NOT NULL
GO


set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON
go


ALTER PROCEDURE {databaseOwner}[{objectQualifier}avtRedirect_UpdateRedirect]

	@roleId				int,
	@allUsers			int,
	@unregisteredUsers	int,
	@url				nvarchar(1024),
	@logoutUser			int

AS

IF @roleId <= 0
	SET @roleId = NULL

IF @roleId IS NULL
BEGIN
	IF @allUsers=1 AND EXISTS (SELECT RedirectId FROM {databaseOwner}{objectQualifier}avtRedirect WHERE RoleID IS NULL AND RoleAllUsers = 1)
		UPDATE {databaseOwner}{objectQualifier}avtRedirect
			SET    RedirectUrl = @url, LogoutUser = @logoutUser
			WHERE  RoleID IS NULL AND RoleAllUsers = 1
	ELSE 
	BEGIN
		IF @unregisteredUsers = 1 AND EXISTS (SELECT RedirectId FROM {databaseOwner}{objectQualifier}avtRedirect WHERE RoleID IS NULL AND RoleUnregisteredUsers = 1)
			UPDATE {databaseOwner}{objectQualifier}avtRedirect
				SET    RedirectUrl = @url, LogoutUser = @logoutUser
				WHERE  RoleID IS NULL AND RoleUnregisteredUsers = 1
		ELSE
			INSERT INTO {databaseOwner}{objectQualifier}avtRedirect(RoleId, RedirectUrl, RoleAllUsers, RoleUnregisteredUsers, LogoutUser) VALUES(@roleId, @url, @allUsers, @unregisteredUsers, @logoutUser)
	END
END
ELSE
BEGIN
	IF EXISTS (SELECT RedirectId FROM {databaseOwner}{objectQualifier}avtRedirect WHERE RoleID = @roleId)
		UPDATE {databaseOwner}{objectQualifier}avtRedirect
			SET    RedirectUrl = @url, LogoutUser = @logoutUser
			WHERE  RoleID = @roleId
	ELSE
		INSERT INTO {databaseOwner}{objectQualifier}avtRedirect(RoleId, RedirectUrl, LogoutUser) VALUES(@roleId, @url, @logoutUser)
END










