
ALTER TABLE {databaseOwner}[{objectQualifier}avtRedirect] ADD ModuleId int NULL
GO


IF NOT EXISTS (SELECT * FROM {databaseOwner}sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}avtRedirect_{objectQualifier}Roles]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1)
ALTER TABLE {databaseOwner}[{objectQualifier}avtRedirect]  WITH CHECK ADD CONSTRAINT [FK_{objectQualifier}avtRedirect_{objectQualifier}Roles] FOREIGN KEY([RoleId])
REFERENCES {databaseOwner}[{objectQualifier}Roles] ([RoleId])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}avtRedirect] CHECK CONSTRAINT [FK_{objectQualifier}avtRedirect_{objectQualifier}Roles]
GO

IF NOT EXISTS (SELECT * FROM {databaseOwner}sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}avtRedirect_{objectQualifier}Modules]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1)
ALTER TABLE {databaseOwner}[{objectQualifier}avtRedirect]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}avtRedirect_{objectQualifier}Modules] FOREIGN KEY([ModuleId])
REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleId])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}avtRedirect] CHECK CONSTRAINT [FK_{objectQualifier}avtRedirect_{objectQualifier}Modules]
GO


--------------------------------------------------------------------------------------------------

ALTER TABLE {databaseOwner}[{objectQualifier}avtRedirectRef] ADD ModuleId int NULL
GO

IF NOT EXISTS (SELECT * FROM {databaseOwner}sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}avtRedirectRef_{objectQualifier}Modules]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1)
ALTER TABLE {databaseOwner}[{objectQualifier}avtRedirectRef]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}avtRedirectRef_{objectQualifier}Modules] FOREIGN KEY([ModuleId])
REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleId])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}avtRedirectRef] CHECK CONSTRAINT [FK_{objectQualifier}avtRedirectRef_{objectQualifier}Modules]
GO


--------------------------------------------------------------------------------------------------


set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON
go

ALTER PROCEDURE {databaseOwner}[{objectQualifier}avtRedirect_UpdateRedirect]

	@roleId				int,
	@allUsers			int,
	@unregisteredUsers	int,
	@url				nvarchar(1024),
	@logoutUser			int,
	@moduleID			int

AS

IF @roleId <= 0
	SET @roleId = NULL

IF @roleId IS NULL
BEGIN
	IF @allUsers=1 AND EXISTS (SELECT RedirectId FROM {databaseOwner}{objectQualifier}avtRedirect WHERE RoleID IS NULL AND RoleAllUsers = 1 AND ModuleId = @moduleId)
		UPDATE {databaseOwner}{objectQualifier}avtRedirect
			SET    RedirectUrl = @url, LogoutUser = @logoutUser
			WHERE  RoleID IS NULL AND RoleAllUsers = 1 AND ModuleId = @moduleId
	ELSE 
	BEGIN
		IF @unregisteredUsers = 1 AND EXISTS (SELECT RedirectId FROM {databaseOwner}{objectQualifier}avtRedirect WHERE RoleID IS NULL AND RoleUnregisteredUsers = 1 AND ModuleId = @moduleId)
			UPDATE {databaseOwner}{objectQualifier}avtRedirect
				SET    RedirectUrl = @url, LogoutUser = @logoutUser
				WHERE  RoleID IS NULL AND RoleUnregisteredUsers = 1 AND ModuleId = @moduleId
		ELSE
			INSERT INTO {databaseOwner}{objectQualifier}avtRedirect(RoleId, RedirectUrl, RoleAllUsers, RoleUnregisteredUsers, LogoutUser, ModuleId) VALUES(@roleId, @url, @allUsers, @unregisteredUsers, @logoutUser, @moduleID)
	END
END
ELSE
BEGIN
	IF EXISTS (SELECT RedirectId FROM {databaseOwner}{objectQualifier}avtRedirect WHERE RoleID = @roleId AND ModuleId = @moduleId)
		UPDATE {databaseOwner}{objectQualifier}avtRedirect
			SET    RedirectUrl = @url, LogoutUser = @logoutUser
			WHERE  RoleID = @roleId AND ModuleId = @moduleId
	ELSE
		INSERT INTO {databaseOwner}{objectQualifier}avtRedirect(RoleId, RedirectUrl, LogoutUser, ModuleId) VALUES(@roleId, @url, @logoutUser, @moduleID)
END

GO


--------------------------------------------------------------------------------------------------

set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON
go


ALTER PROCEDURE {databaseOwner}[{objectQualifier}avtRedirect_UpdateRedirectRef]

	@referrer			nvarchar(1024),
	@url				nvarchar(1024),
	@matchDomainonly	int,
	@moduleId			int

AS


IF EXISTS (SELECT RedirectRefId FROM {databaseOwner}{objectQualifier}avtRedirectRef WHERE Referrer = @referrer AND ModuleId = @moduleId)
	UPDATE {databaseOwner}{objectQualifier}avtRedirectRef
		SET    RedirectUrl = @url, MatchDomainOnly = @matchDomainonly
		WHERE  Referrer = @referrer AND ModuleId = @moduleId
ELSE
	INSERT INTO {databaseOwner}{objectQualifier}avtRedirectRef(Referrer, MatchDomainOnly, RedirectUrl, ModuleId) VALUES(@referrer, @matchDomainonly, @url, @moduleId)

GO


--------------------------------------------------------------------------------------------------

set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON
go



ALTER procedure {databaseOwner}[{objectQualifier}avtRedirect_GetRedirectsRef]

	@moduleId int

as

-- upgrade code
UPDATE {databaseOwner}{objectQualifier}avtRedirectRef Set ModuleId = @moduleId where ModuleId IS NULL


	SELECT * FROM {databaseOwner}{objectQualifier}avtRedirectRef
	Where ModuleId = @moduleId

GO


--------------------------------------------------------------------------------------------------


set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON
go



ALTER procedure {databaseOwner}[{objectQualifier}avtRedirect_GetRedirects]

	@portalId int,
	@moduleId int

as

-- upgrade code
UPDATE {databaseOwner}{objectQualifier}avtRedirect Set ModuleId = @moduleId where ModuleId IS NULL



	SELECT AVTR.*, 
		(CASE WHEN AVTR.RoleID IS NULL THEN 
			(CASE WHEN RoleAllUsers = 1 THEN 'All Users' ELSE 'Unregistered Users' END) 
			ELSE R.RoleName END) as RoleName 
	FROM {databaseOwner}{objectQualifier}avtRedirect AVTR
	LEFT JOIN {objectQualifier}Roles R on R.RoleID = AVTR.RoleID
	WHERE (R.PortalID = @portalId OR AVTR.RoleId IS NULL) AND AVTR.ModuleId = @moduleId
	ORDER BY AVTR.RedirectPriority DESC


GO




