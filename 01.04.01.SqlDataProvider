
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}avtRedirectRef](
	[RedirectRefId] [int] IDENTITY(1,1) NOT NULL,
	[Referrer] [nvarchar](1024) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[MatchDomainOnly] [int] NOT NULL CONSTRAINT [DF_{objectQualifier}avtRedirectRef_MatchDomainOnly]  DEFAULT ((0)),
	[RedirectUrl] [nvarchar](1024) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
 CONSTRAINT [PK_{objectQualifier}avtRedirectRef] PRIMARY KEY CLUSTERED 
(
	[RedirectRefId] ASC
)
) ON [PRIMARY]

GO


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure {databaseOwner}[{objectQualifier}avtRedirect_GetRedirectsRef]

	@portalId int

as

	SELECT * FROM {databaseOwner}{objectQualifier}avtRedirectRef


GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE {databaseOwner}[{objectQualifier}avtRedirect_RemoveRedirectRef]

	@referrer nvarchar(1024)

AS

	DELETE FROM {databaseOwner}{objectQualifier}avtRedirectRef WHERE Referrer = @referrer

GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE {databaseOwner}[{objectQualifier}avtRedirect_RemoveRedirectRefById]

	@redirectRefId		int

AS

	DELETE FROM {databaseOwner}{objectQualifier}avtRedirectRef WHERE RedirectRefID = @redirectRefId



GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE {databaseOwner}[{objectQualifier}avtRedirect_UpdateRedirectRef]

	@referrer			nvarchar(1024),
	@url				nvarchar(1024),
	@matchDomainonly	int

AS


IF EXISTS (SELECT RedirectRefId FROM {databaseOwner}{objectQualifier}avtRedirectRef WHERE Referrer = @referrer)
	UPDATE {databaseOwner}{objectQualifier}avtRedirectRef
		SET    RedirectUrl = @url, MatchDomainOnly = @matchDomainonly
		WHERE  Referrer = @referrer
ELSE
	INSERT INTO {databaseOwner}{objectQualifier}avtRedirectRef(Referrer, MatchDomainOnly, RedirectUrl) VALUES(@referrer, @matchDomainonly, @url)

GO

